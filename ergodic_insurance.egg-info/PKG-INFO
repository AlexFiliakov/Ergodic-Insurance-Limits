Metadata-Version: 2.4
Name: ergodic-insurance
Version: 0.3.0
Summary: Financial modeling for widget manufacturers with ergodic insurance limits
Home-page: https://github.com/yourusername/ergodic-insurance-limits
Author: Alex Filiakov
Author-email: Alex Filiakov <alexfiliakov@gmail.com>
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=2.3.2
Requires-Dist: pandas>=2.3.2
Requires-Dist: pydantic>=2.11.7
Requires-Dist: pyyaml>=6.0.2
Requires-Dist: matplotlib>=3.10.5
Requires-Dist: seaborn>=0.13.2
Requires-Dist: scipy>=1.16.1
Requires-Dist: jinja2>=3.1.0
Provides-Extra: dev
Requires-Dist: pytest>=8.4.1; extra == "dev"
Requires-Dist: pytest-cov>=6.2.1; extra == "dev"
Requires-Dist: coverage>=7.7.0; extra == "dev"
Requires-Dist: pytest-xdist>=3.8.0; extra == "dev"
Requires-Dist: pylint>=3.3.8; extra == "dev"
Requires-Dist: black>=25.1.0; extra == "dev"
Requires-Dist: mypy>=1.17.1; extra == "dev"
Requires-Dist: isort>=6.0.1; extra == "dev"
Requires-Dist: types-PyYAML>=6.0.0; extra == "dev"
Requires-Dist: pre-commit>=3.6.0; extra == "dev"
Provides-Extra: notebooks
Requires-Dist: jupyter>=1.1.1; extra == "notebooks"
Requires-Dist: notebook>=7.4.5; extra == "notebooks"
Requires-Dist: ipykernel>=6.30.1; extra == "notebooks"
Requires-Dist: nbformat>=5.10.4; extra == "notebooks"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Ergodic Insurance Limits

Rationalizing and optimizing insurance purchasing decisions.

![Repo Banner](assets/repo_banner_small.png)

This research model applies Ole Peters‚Äô ergodic economics framework to insurance optimization for a widget manufacturing company, demonstrating that traditional expected value approaches systematically mislead insurance decisions. By optimizing time-average growth rates (for a single company) rather than ensemble averages (across many companies), the model aims to demonstrate that insurance premiums can significantly exceed expected losses while still enhancing long-term growth, transforming insurance from a cost center to a growth enabler. The implementation features:
- A comprehensive Monte Carlo simulation engine with stochastic processes (GBM, mean-reversion)
- Multi-layer insurance programs with collateral management
- Extensive configuration architecture
- CPU-optimized parallel processing

[![Documentation Status](https://github.com/AlexFiliakov/Ergodic-Insurance-Limits/actions/workflows/docs.yml/badge.svg)](https://alexfiliakov.github.io/Ergodic-Insurance-Limits/)

## Introduction - Why Do Companies Buy Insurance?

### Ergodic theory transforms insurance optimization fundamentally

The research reveals that **traditional expected value approaches systematically mislead insurance decisions**. Ole Peters' ergodic economics framework demonstrates that insurance creates win-win scenarios when analyzed through time averages rather than ensemble averages. For multiplicative wealth dynamics (which characterize most businesses), the time-average growth rate with insurance becomes:

$$g = \lim_{T\to\infty}{\frac{1}{T}\ln{\frac{x(T)}{x(0)}}}$$

This framework resolves the fundamental insurance puzzle: while insurance appears zero-sum in expected value terms, both parties benefit when optimizing time-average growth rates. For our widget manufacturing model with \$10M starting assets, the hypothesis is that **optimal insurance premiums can exceed expected losses by 200-500%** while still enhancing long-term growth. This package is being built to validate this hypothesis.

### Value Proposition

![Ergodic Distinction Between Averages](assets/ergodic_distinction.png)

The framework fundamentally reframes insurance from a cost center to growth enabler. By optimizing time-average growth rates rather than expected values, widget manufacturers can achieve **30-50% better long-term performance** while maintaining acceptable ruin probabilities. The key insight: **maximizing ergodic growth rates naturally balances profitability with survival**, eliminating the need for arbitrary risk preferences or utility functions.

This comprehensive framework provides the mathematical rigor, practical parameters, and implementation roadmap necessary for successful insurance optimization in widget manufacturing, with the ergodic approach offering genuinely novel insights that challenge conventional risk management wisdom.

## Key Features

```mermaid
flowchart LR
    %% Simplified Executive View
    INPUT[("üìä Market Data<br/>& Configuration")]
    BUSINESS[("üè≠ Business<br/>Simulation")]
    ERGODIC[("üìà Ergodic<br/>Analysis")]
    OPTIMIZE[("üéØ Strategy<br/>Optimization")]
    OUTPUT[("üìë Reports &<br/>Insights")]

    INPUT --> BUSINESS
    BUSINESS --> ERGODIC
    ERGODIC --> OPTIMIZE
    OPTIMIZE --> OUTPUT

    %% Styling
    classDef inputStyle fill:#e3f2fd,stroke:#0d47a1,stroke-width:3px,font-size:14px
    classDef processStyle fill:#f3e5f5,stroke:#4a148c,stroke-width:3px,font-size:14px
    classDef outputStyle fill:#e8f5e9,stroke:#1b5e20,stroke-width:3px,font-size:14px

    class INPUT inputStyle
    class BUSINESS,ERGODIC,OPTIMIZE processStyle
    class OUTPUT outputStyle
```

### Financial Modeling
- **Widget manufacturer model** with comprehensive balance sheet management
- **Stochastic processes** including geometric Brownian motion, lognormal volatility, and mean-reversion
- **Insurance claim processing** with multi-year payment schedules
- **Collateral management** for letter of credit requirements

### Configuration Management
- **3-tier configuration architecture** with profiles, modules, and presets
- **ConfigManager** with profile inheritance and module composition
- **Runtime overrides** for flexible parameter experimentation
- **Preset libraries** for common market conditions and risk scenarios

### Documentation & Testing
- **Sphinx documentation system** for professional API reference
- **Comprehensive Google-style docstrings** throughout the codebase
- **90% test coverage** with pytest framework
- **Type safety** enforced with mypy static analysis

### Analysis Tools
![Sample Analytics: Optimal Insurance Configuration by Company Size](assets/sample_optmal_insurance_config_by_company_size.png)
- **Performance metrics** including ROE, risk of ruin, and time-average growth rates
- **Robust Visualizations and Annotations** to help you see the stories behind the results
- **Jupyter notebooks** with examples of interactive exploration and visualization
- **Demo scripts** showing stochastic vs deterministic comparisons

### Enhanced Parallel Processing (v2.0)
- **CPU-optimized parallel executor** designed for budget hardware (4-8 cores)
- **Memory efficiency** - handles 100K+ simulations in <4GB RAM
- **Smart dynamic chunking** that adapts to workload complexity
- **Shared memory management** for zero-copy data sharing across processes
- **Near-linear scaling** with minimal serialization overhead (<5%)
- **Performance monitoring** with detailed metrics and benchmarking tools

## Published Results

- [Ergodic Insurance Part 1: From Cost Center to Growth Engine: When N=1](https://medium.com/@alexfiliakov/ergodic-insurance-part-1-from-cost-center-to-growth-engine-when-n-1-52c17b048a94)

## Installation

### Prerequisites
- Python 3.12 or higher
- Git

### Setup

1. Clone the repository:
```bash
git clone https://github.com/AlexFiliakov/Ergodic-Insurance-Limits.git
cd Ergodic-Insurance-Limits
```

2. Install dependencies using uv (recommended) or pip:
```bash
# Using uv
uv sync

# Or using pip
pip install -e .
```

3. Install pre-commit hooks for code quality:
```bash
pre-commit install
```

## Verify Installation

```python
# test_installation.py
from ergodic_insurance.manufacturer import WidgetManufacturer
from ergodic_insurance.claim_generator import ClaimGenerator
from ergodic_insurance.config_v2 import ManufacturerConfig

print("‚úÖ Framework imported successfully!")

# Create configuration
config = ManufacturerConfig(
    initial_assets=10_000_000,
    asset_turnover_ratio=1.0,
    base_operating_margin=0.08,
    tax_rate=0.25,
    retention_ratio=0.7
)

# Create a simple manufacturer
company = WidgetManufacturer(config)

print(f"‚úÖ Created company with ${company.assets:,.0f} in assets")
print("üéâ Installation successful!")
```

## Exploratory Notebooks

- [Growth Dynamics and Asset Fluctuations](ergodic_insurance/notebooks/03_growth_dynamics.ipynb)
- [Ergodic Insurance Advantage Demonstration](ergodic_insurance/notebooks/04_ergodic_demo.ipynb)
- [Risk Metrics Suite for Tail Risk Analysis](ergodic_insurance/notebooks/05_risk_metrics.ipynb)

## Documentation

See [Getting Started](https://docs.ergodicityadvantage.com/api/tutorials/01_getting_started.html) for starter examples.

## Project Structure

```
Ergodic-Insurance-Limits/
‚îú‚îÄ‚îÄ ergodic_insurance/          # Main Python package
‚îÇ   ‚îú‚îÄ‚îÄ src/                   # Core modules (50+ files)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config_*.py        # Configuration system v2.0 - 3-tier architecture with profiles, modules, and presets
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ manufacturer.py    # Widget manufacturer financial model with balance sheet management
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ insurance*.py      # Insurance optimization, pricing, and multi-layer program management
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ claim_*.py         # Claim generation and multi-year payment development patterns
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ loss_distributions.py # Statistical loss modeling (lognormal, pareto, etc.)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ monte_carlo.py     # Enhanced Monte Carlo simulation engine with parallel processing
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ergodic_analyzer.py # Ergodic theory implementation for time-average growth analysis
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ simulation.py      # Main simulation orchestrator
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stochastic_processes.py # GBM, mean-reversion, and volatility models
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ risk_metrics.py    # VaR, CVaR, tail risk, and ruin probability calculations
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ optimization.py    # Core optimization algorithms and solvers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ business_optimizer.py # Business-specific optimization strategies
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ decision_engine.py # Decision framework for insurance purchasing
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ parallel_executor.py # CPU-optimized parallel processing for budget hardware
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ convergence*.py    # Convergence analysis and advanced stopping criteria
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sensitivity*.py    # Sensitivity analysis and visualization tools
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bootstrap_analysis.py # Statistical bootstrap methods
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validation_metrics.py # Model validation and accuracy metrics
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ walk_forward_validator.py # Walk-forward validation framework
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ strategy_backtester.py # Insurance strategy backtesting
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ result_aggregator.py # Results aggregation and summary statistics
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ excel_reporter.py  # Excel report generation for business users
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ visualization*.py  # Comprehensive plotting and visualization utilities
‚îÇ   ‚îú‚îÄ‚îÄ tests/                 # Test suite with 80%+ coverage
‚îÇ   ‚îú‚îÄ‚îÄ notebooks/             # Jupyter notebooks for analysis and exploration
‚îÇ   ‚îú‚îÄ‚îÄ examples/              # Demo scripts showing framework usage
‚îÇ   ‚îú‚îÄ‚îÄ data/                  # Configuration and parameter files
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ config/           # 3-tier configuration system
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ profiles/     # Complete configuration profiles (default, conservative, aggressive)
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ modules/      # Reusable configuration components
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ presets/      # Quick-apply market condition templates
‚îÇ   ‚îî‚îÄ‚îÄ docs/                  # Sphinx documentation with API reference
‚îú‚îÄ‚îÄ simone/                    # AI project management engine
‚îú‚îÄ‚îÄ assets/                    # Images, diagrams, and visual resources
‚îú‚îÄ‚îÄ results/                   # Simulation outputs and analysis reports
‚îú‚îÄ‚îÄ .github/workflows/         # CI/CD pipelines for docs and testing
‚îú‚îÄ‚îÄ pyproject.toml            # Python project configuration and dependencies
‚îú‚îÄ‚îÄ uv.lock                   # Locked dependency versions for reproducibility
‚îú‚îÄ‚îÄ README.md                 # Project overview and documentation (this file)
‚îú‚îÄ‚îÄ CLAUDE.md                 # AI assistant development instructions
‚îî‚îÄ‚îÄ LICENSE                   # MIT open source license
```

## Contributing

See the list of [Open Issues](https://github.com/AlexFiliakov/Ergodic-Insurance-Limits/issues) for improvement ideas.

### Code Quality Tools

This project uses several tools to maintain code quality:

- **Black**: Code formatting (line length: 100)
- **isort**: Import sorting
- **mypy**: Static type checking
- **pylint**: Code linting
- **pytest-cov**: Test coverage reporting (minimum: 80%)

### Running Tests

```bash
# Run all tests with coverage
pytest

# Run specific test file
pytest ergodic_insurance/tests/test_manufacturer.py

# Run with coverage report
pytest --cov=ergodic_insurance --cov-report=html
```

### Pre-commit Hooks

Pre-commit hooks run automatically on commit. To run manually:

```bash
# Run on all files
pre-commit run --all-files

# Run specific hook
pre-commit run black --all-files
```

### Type Checking

```bash
# Run mypy
mypy ergodic_insurance

# Run with specific file
mypy ergodic_insurance/src/manufacturer.py
```

### Code Formatting

```bash
# Format with black
black ergodic_insurance

# Sort imports with isort
isort ergodic_insurance
